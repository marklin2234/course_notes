model.ortho <- lm(training ~ poly(time(training), degree), data=training)
pred <- predict(model.ortho, newdata=data.frame(training=time(test)))
results$mse[degree] <- MSE(test, pred)
results$lhc[degree] <- MHC(test, pred)
}
par(mfrow=c(1,2))
plab <- seq(from=1, to=5, by=1)
plot(y=results$mse, x=plab)
plot(y=results$lhc, x=plab)
MSE <- function(y, p) {
return( (1/24) * sum((y - p)^2) )
}
lhc <- function(y, fx) {
return ( sum(exp(y - fx) + exp(fx - y) - 2) )
}
MHC <- function(y, p) {
return ((1/24) * lhc(y, p))
}
results <- data.frame(degree=1:5, mse=NA, lhc=NA)
for (degree in 1:5) {
model.ortho <- lm(training ~ poly(time(training), degree), data=training)
pred <- predict(model.ortho, newdata=data.frame(training=time(test)))
results$mse[degree] <- MSE(test, pred)
results$lhc[degree] <- MHC(test, pred)
}
par(mfrow=c(1,2))
plab <- seq(from=1, to=5, by=1)
plot(y=results$mse, x=plab, main="", xlab="p", ylab="MSE")
plot(y=results$lhc, x=plab)
MSE <- function(y, p) {
return( (1/24) * sum((y - p)^2) )
}
lhc <- function(y, fx) {
return ( sum(exp(y - fx) + exp(fx - y) - 2) )
}
MHC <- function(y, p) {
return ((1/24) * lhc(y, p))
}
results <- data.frame(degree=1:5, mse=NA, lhc=NA)
for (degree in 1:5) {
model.ortho <- lm(training ~ poly(time(training), degree), data=training)
pred <- predict(model.ortho, newdata=data.frame(training=time(test)))
results$mse[degree] <- MSE(test, pred)
results$lhc[degree] <- MHC(test, pred)
}
par(mfrow=c(1,2))
plab <- seq(from=1, to=5, by=1)
plot(y=results$mse, x=plab, main="MSE vs degrees", xlab="degrees", ylab="MSE")
plot(y=results$lhc, x=plab, main="MHC vs degrees", xlab="degrees", ylab="MHC")
best_mse_degree <- which.min(results$mse)
best_lhc_degree <- which.min(results$l_hc)
which.min(results$mse)
which.min(results$l_hc)
which.min(results$mse)
which.min(results$lhc)
plot(data)
plot(data)
abline(lm(data ~ poly(time(data), 2), data=data))
plot(data)
lines(lm(data ~ poly(time(data), 2), data=data))
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
lines(best_model)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data)
lines(y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data.frame(time=time(data)))
lines(time(data), y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data.frame(time=time(data)))
lines(y_hat)
y_hat
time(data)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=time(data))
lines(time(data), y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data.frame(time=time(data)))
lines(time(data), y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data.frame(time=time(data)))
lines(y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data.frame(time=time(data)))
lines(time(data), y_hat)
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model, newdata=data.frame(time=time(data)))
lines(time(data), y_hat)
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
y_hat
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(y_hat)
best_model
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(x=time(data), y_hat)
time(data)
summary(best_model)
plot.ts(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(x=time(data), y_hat)
plot.ts(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(time(data), data)
best_model <- lm(data ~ poly(seq_along(time(data)), 2))
y_hat <- predict(best_model)
lines(time(data), y_hat)
data
plot(data)
best_model <- lm(data ~ poly(seq_along(time(data)), 2))
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(time(data), y_hat)
y_hat
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
abline(y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(y_hat,col="red")
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(y_hat,col="red",lwd=10)
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(y_hat,col="red",lwd=2)
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(y_hat,col="red",lwd=1000)
plot(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(time(data), y_hat,col="red",lwd=1000)
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(time(data), y_hat,col="red",lwd=1000)
best_model
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2))
# Extract the coefficients of the model
coeffs <- coef(best_model)
# Get the time values from the time series object
time_vals <- time(data)
# Calculate the fitted values manually using the polynomial formula
y_hat <- coeffs[1] + coeffs[2] * poly(time_vals, 2)[,1] + coeffs[3] * poly(time_vals, 2)[,2]
lines(time(data), y_hat,col="red",lwd=1000)
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2))
# Extract the coefficients of the model
coeffs <- coef(best_model)
# Get the time values from the time series object
time_vals <- time(data)
# Calculate the fitted values manually using the polynomial formula
y_hat <- coeffs[1] + coeffs[2] * poly(time_vals, 2)[,1] + coeffs[3] * poly(time_vals, 2)[,2]
lines(y_hat,col="red",lwd=1000)
y_hat
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2))
# Extract the coefficients of the model
coeffs <- coef(best_model)
# Get the time values from the time series object
time_vals <- time(data)
# Calculate the fitted values manually using the polynomial formula
y_hat <- coeffs[1] + coeffs[2] * poly(time_vals, 2)[,1] + coeffs[3] * poly(time_vals, 2)[,2]
lines(y_hat,col="blue")
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2))
# Extract the coefficients of the model
coeffs <- coef(best_model)
# Get the time values from the time series object
time_vals <- time(data)
# Calculate the fitted values manually using the polynomial formula
y_hat <- coeffs[1] + coeffs[2] * poly(time_vals, 2)[,1] + coeffs[3] * poly(time_vals, 2)[,2]
lines(fitted(y_hat),col="blue")
plot.ts(data)
best_model <- lm(data ~ poly(time(data), 2))
y_hat <- predict(best_model)
lines(fitted(y_hat),col="blue")
best_model <- lm(data ~ poly(time(data), 2))
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
best_model <- lm(data ~ poly(time(data), 2))
library(ggplot2)
ggplot(data, aes(x = time, y = value)) +
geom_line(color = "black") +  # Time series line
labs(title = "Time Series Plot with Additional Line",
x = "Time",
y = "Values") +
theme_minimal() +
best_model <- lm(data ~ poly(time(data), 2))
library(ggplot2)
ggplot(data, aes(x = time, y = value)) +
geom_line(color = "black") +  # Time series line
labs(title = "Time Series Plot with Additional Line",
x = "Time",
y = "Values") +
theme_minimal()
best_model <- lm(data ~ poly(time(data), 2))
library(ggplot2)
ggplot(data) +
geom_line(color = "black") +  # Time series line
labs(title = "Time Series Plot with Additional Line",
x = "Time",
y = "Values") +
theme_minimal()
plot(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(time(data), y_hat)
plot(time(data), data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(y_hat)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
y_hat
time(data)
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
y_hat
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12))
plot(data)
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend()
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"))
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
get_predictions <- function(x) {
return (2010+7/12 + 1/12*x)
}
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"),lwd=1)
end(data)
end(data)[1]
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
new_time
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat <- predict(best_model, newdata=new_time)
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat <- predict(best_model, newdata=data.frame(time=new_time))
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time))
y_hat
new_time <- seq(from=157,to=169,by=1)
y_hat <- predict(best_model, newdata=data.frame(data=))
new_time <- seq(from=157,to=169,by=1)
y_hat <- predict(best_model, newdata=data.frame(data=new_time))
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"),lwd=1)
y_hat
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(y_hat)
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(y_hat)
new_time <- seq(from=end(data)[1] + 1/12, by=1/12,length.out=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(y_hat)
new_time
best_model
time(data)
time(new_time)
time
new_time
time(test)
ts(new_time)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(y_hat)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(y_hat)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(y_hat[,fit])
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(y_hat)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(y_hat[,"fit"])
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
y_hat <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(y_hat)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat[,"fit"]))
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
preds <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(preds)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
best_model <- lm(data ~ poly(time(data), 2), data=data)
y_hat <- predict(best_model)
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"),lwd=1)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"),lwd=1)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
lines(ts(pred[,"fit"],start=end(data)[1] + 1/12, frequency=12))
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"),lwd=1)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
lines(ts(pred[,"fit"],start=end(data)[1] + 1/12, frequency=12),col="red")
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"),lwd=1)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
lines(ts(pred[,"fit"],start=end(data)[1] + 1/12, frequency=12),col="red")
lines(ts(pred[,"lwr"],start=end(data)[1] + 1/12, frequency=12),col="red")
lines(ts(pred[,"upr"],start=end(data)[1] + 1/12, frequency=12),col="red")
legend("topleft", legend=c("time series", "fitted model"), col=c("black", "blue"),lwd=1)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
lines(ts(pred[,"fit"],start=end(data)[1] + 1/12, frequency=12),col="red")
lines(ts(pred[,"lwr"],start=end(data)[1] + 1/12, frequency=12),col="red")
lines(ts(pred[,"upr"],start=end(data)[1] + 1/12, frequency=12),col="red")
legend("topleft", legend=c("time series", "fitted model", "prediction"), col=c("black", "blue", "red"),lwd=1)
new_time <- ts(seq(from=end(data)[1] + 1/12, by=1/12,length.out=12), start=end(data)[1] + 1/12, frequency=12)
pred <- predict(best_model, newdata=data.frame(data=new_time), interval="prediction", level=0.95)
print(pred)
plot(data, main="Time Series Plot of Q2 Data", ylab="Value", xlab="Year")
lines(ts(y_hat, start=2010+7/17, frequency=12), col="blue")
lines(ts(pred[,"fit"],start=end(data)[1] + 1/12, frequency=12),col="red")
lines(ts(pred[,"lwr"],start=end(data)[1] + 1/12, frequency=12),col="green")
lines(ts(pred[,"upr"],start=end(data)[1] + 1/12, frequency=12),col="green")
legend("topleft", legend=c("time series", "fitted model", "prediction", "prediction interval"), col=c("black", "blue", "red", "green"),lwd=1)
plot(best_model)
shapiro.test(best_model$residuals)
fligner.test(best_model$residuals, time(data))
fligner.test(best_model$residuals, rep(1:4,each=39))
fligner.test(best_model$residuals, rep(1:4,each=39))
acf(best_model$residuals, main = "Sample ACF of Residuals")
randtests::difference.sign.test(best_model$residuals)
install.packages("randtests")
library(randtests)
randtests::difference.sign.test(best_model$residuals)
randtets::run.test(best_model$residuals,plot=TRUE)
library(randtests)
randtests::difference.sign.test(best_model$residuals)
randtests::run.test(best_model$residuals,plot=TRUE)
library(randtests)
randtests::difference.sign.test(best_model$residuals)
randtests::runs.test(best_model$residuals,plot=TRUE)
library(randtests)
randtests::difference.sign.test(best_model$residuals)
randtests::runs.test(best_model$residuals,plot=TRUE)
