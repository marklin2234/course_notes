rect(xleft=1.075,xright=1.1,ytop=1.72,ybottom=1.78,col="green")
rect(xleft=(-0.5-0.025),xright=-0.5,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
rect(xleft=(-0.2-0.025),xright=-0.2,ytop=-0.8-0.03,ybottom=-0.8+0.03,col="green")
rect(xleft=(0.1-0.025),xright=0.1,ytop=1.1-0.03,ybottom=1.1+0.03,col="green")
rect(xleft=0.75-0.025,xright=0.75,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
y <- seq(-1, 2, by=0.5)
x <- seq(-1.5, 1.5, by=0.5)
z <- outer(X=x, Y=y, FUN=Vectorize(function(x,y) { rho(c(x,y))}))
contour(x,y,z, levels=c(1,10,50,150,350,700),xlab=expression(theta[1]),ylab=expression(theta[2]))
rect(xleft=1.075,xright=1.1,ytop=1.72,ybottom=1.78,col="green")
rect(xleft=(-0.5-0.025),xright=-0.5,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
rect(xleft=(-0.2-0.025),xright=-0.2,ytop=-0.8-0.03,ybottom=-0.8+0.03,col="green")
rect(xleft=(0.1-0.025),xright=0.1,ytop=1.1-0.03,ybottom=1.1+0.03,col="green")
rect(xleft=0.75-0.025,xright=0.75,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
segments(x0=1.1,y0=1.75,x1=0.9999632,y1=1.0079989,col="green",lwd=1)
y <- seq(-1, 2, by=0.5)
x <- seq(-1.5, 1.5, by=0.5)
z <- outer(X=x, Y=y, FUN=Vectorize(function(x,y) { rho(c(x,y))}))
contour(x,y,z, levels=c(1,10,50,150,350,700),xlab=expression(theta[1]),ylab=expression(theta[2]))
rect(xleft=1.075,xright=1.1,ytop=1.72,ybottom=1.78,col="green")
rect(xleft=(-0.5-0.025),xright=-0.5,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
rect(xleft=(-0.2-0.025),xright=-0.2,ytop=-0.8-0.03,ybottom=-0.8+0.03,col="green")
rect(xleft=(0.1-0.025),xright=0.1,ytop=1.1-0.03,ybottom=1.1+0.03,col="green")
rect(xleft=0.75-0.025,xright=0.75,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
segments(x0=1.1,y0=1.75,x1=0.9999632,y1=1.0079989,col="green",lwd=1)
segments(x0=-0.5,y0=0.6,x1=-0.6628252,y1=0.4375563,col="green",lwd=1)
segments(x0=-0.2,y0=-0.8,x1=0.3455740,y1=0.1131815,col="green",lwd=1)
segments(x0=0.1,y0=1.1,x1=0.3469271,y1=0.1139806,col="green",lwd=1)
segments(x0=0.75,y0=0.6,x1=0.9975885,y1=0.9996567,col="green",lwd=1)
y <- seq(-1, 2, by=0.5)
x <- seq(-1.5, 1.5, by=0.5)
z <- outer(X=x, Y=y, FUN=Vectorize(function(x,y) { rho(c(x,y))}))
contour(x,y,z, levels=c(1,10,50,150,350,700),xlab=expression(theta[1]),ylab=expression(theta[2]))
rect(xleft=1.075,xright=1.1+0.025,ytop=1.72,ybottom=1.78,col="green")
rect(xleft=(-0.5-0.025),xright=-0.5+0.025,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
rect(xleft=(-0.2-0.025),xright=-0.2+0.025,ytop=-0.8-0.03,ybottom=-0.8+0.03,col="green")
rect(xleft=(0.1-0.025),xright=0.1+0.025,ytop=1.1-0.03,ybottom=1.1+0.03,col="green")
rect(xleft=0.75-0.025,xright=0.75+0.025,ytop=0.6-0.03,ybottom=0.6+0.03,col="green")
segments(x0=1.1,y0=1.75,x1=0.9999632,y1=1.0079989,col="green",lwd=1)
segments(x0=-0.5,y0=0.6,x1=-0.6628252,y1=0.4375563,col="green",lwd=1)
segments(x0=-0.2,y0=-0.8,x1=0.3455740,y1=0.1131815,col="green",lwd=1)
segments(x0=0.1,y0=1.1,x1=0.3469271,y1=0.1139806,col="green",lwd=1)
segments(x0=0.75,y0=0.6,x1=0.9975885,y1=0.9996567,col="green",lwd=1)
y <- seq(-1, 2, by=0.5)
x <- seq(-1.5, 1.5, by=0.5)
z <- outer(X=x, Y=y, FUN=Vectorize(function(x,y) { rho(c(x,y))}))
contour(x,y,z, levels=c(1,10,50,150,350,700),xlab=expression(theta[1]),ylab=expression(theta[2]))
rect(xleft=1.075,xright=1.1+0.025,ytop=1.72,ybottom=1.78,col="green")
rect(xleft=(-0.5-0.025),xright=-0.5+0.025,ytop=0.6-0.05,ybottom=0.6+0.05,col="green")
rect(xleft=(-0.2-0.025),xright=-0.2+0.025,ytop=-0.8-0.05,ybottom=-0.8+0.05,col="green")
rect(xleft=(0.1-0.025),xright=0.1+0.025,ytop=1.1-0.05,ybottom=1.1+0.05,col="green")
rect(xleft=0.75-0.025,xright=0.75+0.025,ytop=0.6-0.05,ybottom=0.6+0.05,col="green")
segments(x0=1.1,y0=1.75,x1=0.9999632,y1=1.0079989,col="green",lwd=1)
segments(x0=-0.5,y0=0.6,x1=-0.6628252,y1=0.4375563,col="green",lwd=1)
segments(x0=-0.2,y0=-0.8,x1=0.3455740,y1=0.1131815,col="green",lwd=1)
segments(x0=0.1,y0=1.1,x1=0.3469271,y1=0.1139806,col="green",lwd=1)
segments(x0=0.75,y0=0.6,x1=0.9975885,y1=0.9996567,col="green",lwd=1)
y <- seq(-1, 2, by=0.5)
x <- seq(-1.5, 1.5, by=0.5)
z <- outer(X=x, Y=y, FUN=Vectorize(function(x,y) { rho(c(x,y))}))
contour(x,y,z, levels=c(1,10,50,150,350,700),xlab=expression(theta[1]),ylab=expression(theta[2]))
rect(xleft=1.075,xright=1.1+0.025,ytop=1.72,ybottom=1.78,col="green")
rect(xleft=(-0.5-0.025),xright=-0.5+0.025,ytop=0.6-0.06,ybottom=0.6+0.06,col="green")
rect(xleft=(-0.2-0.025),xright=-0.2+0.025,ytop=-0.8-0.06,ybottom=-0.8+0.06,col="green")
rect(xleft=(0.1-0.025),xright=0.1+0.025,ytop=1.1-0.06,ybottom=1.1+0.06,col="green")
rect(xleft=0.75-0.025,xright=0.75+0.025,ytop=0.6-0.06,ybottom=0.6+0.06,col="green")
segments(x0=1.1,y0=1.75,x1=0.9999632,y1=1.0079989,col="green",lwd=1)
segments(x0=-0.5,y0=0.6,x1=-0.6628252,y1=0.4375563,col="green",lwd=1)
segments(x0=-0.2,y0=-0.8,x1=0.3455740,y1=0.1131815,col="green",lwd=1)
segments(x0=0.1,y0=1.1,x1=0.3469271,y1=0.1139806,col="green",lwd=1)
segments(x0=0.75,y0=0.6,x1=0.9975885,y1=0.9996567,col="green",lwd=1)
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence,relative=TRUE)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence,maxIterations=1000)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence,lambdaStepSize=0.001)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence,lambdaStepSize=0.01)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)$theta
gradientDescent(theta = c(-1, -0.5), rhoFn = rho, gradientFn = gradient, lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence,lambdaStepsize=0.001)$theta
library(plyr)
library(plyr)
eeg_all = read.csv("eeg_all.csv")
eeg_summary <- read.csv("eeg_summary.csv")
View(eeg_summary)
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=blinks_minute, y=jaws_minute, main="Scatterplot of Blinks Minute vs Jaws Minute", xlab="Blink Events per Minute",ylab='Jaw Clench Events per Minute')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=blinks_minute, y=jaws_minute, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=jaws_minute, blinks_minute=blinks_minute)
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=x, blinks_minute=y)
model <- lm(jaws_minute ~ blinks_minute, data=df)
abline(model)
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=x, blinks_minute=y)
model <- lm(y ~ x, data=df)
abline(model)
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)){
nou = df[-x,]
u <- lm(y ~ x, data=without_u)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)){
nou = df[-x,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou = df[-i,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=x, blinks_minute=y)
model <- lm(y ~ x, data=df)
abline(model)
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou = df[-i,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=x, blinks_minute=y)
model <- lm(y ~ x, data=df)
abline(model)
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=x, blinks_minute=y)
model <- lm(y ~ x, data=df)
abline(model)
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=x, blinks_minute=y)
model <- lm(y ~ x, data=df)
abline(model)
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=x, blinks_minute=y)
model <- lm(y ~ x, data=df)
abline(model)
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(y ~ x, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
print(theta_hat)
print(theta_hat_u)
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (i in 1:nrow(df)){
nou <- df[-i,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
print(theta_hat_u)
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)){
nou <- df[-x,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
print(theta_hat_u)
influences <- append(influences, influence)
}
xrange <- 1:nrow(df)
plot(x=xrange, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)){
nou <- df[-x,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)){
nou <- df[-x,]
print(nou)
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)) {
print(x)
nou <- df[-x,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)){
without_u = df[-x,]
model_u <- lm(jaws_minute ~ blinks_minute, data=without_u)
theta_hat_u <- c(coef(model_u)[1], coef(model_u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:21
plot(x=x, y=influences, main="Scatterplot of Influence vs Session Number", xlab="Session Number",ylab='Influence')
eeg_summary <- read.csv("eeg_summary.csv")
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
df <- data.frame(jaws_minute=y, blinks_minute=x)
model <- lm(y ~ x, data=df)
abline(model)
theta_hat <- c(coef(model)[1], coef(model)[2])
influences <- c()
for (x in 1:nrow(df)) {
nou <- df[-x,]
u <- lm(jaws_minute ~ blinks_minute, data=nou)
theta_hat_u <- c(coef(u)[1], coef(u)[2])
influence <- norm((theta_hat - theta_hat_u), type='2')
influences <- append(influences, influence)
}
x <- 1:nrow(df)
plot(x=x, y=influences, main="Influence vs Session Number", xlab="Session Number",ylab='Influence')
new_df <- df[-c(10,14),]
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
abline(model)
new_model <- lm(jaws_minute ~ blinks_minute, df=new_df)
new_df <- df[-c(10,14),]
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
abline(model)
new_model <- lm(y ~ x, df=new_df)
abline(new_model, col="red")
new_df <- df[-c(10,14),]
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
abline(model)
new_model <- lm(y ~ x, df=new_df)
abline(new_model, col="red")
new_df <- df[-c(10,14),]
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
abline(model)
new_model <- lm(jaws_minute ~ blinks_minute, df=new_df)
new_df <- df[-c(10,14),]
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
abline(model)
new_model <- lm(y ~ x, df=new_df)
abline(new_model, col="red")
new_df <- df[-c(10,14),]
x <- eeg_summary$blinks_minute
y <- eeg_summary$jaws_minute
plot(x=x, y=y, main="Blinks/min vs Jaws/min", xlab="Blinks/min",ylab='Jaw Clenches/min')
abline(model)
x <- eeg_summary$blinks_minute[-c(10,14)]
y <- eeg_summary$jaws_minute[-c(10,14)]
new_model <- lm(y ~ x, df=new_df)
abline(new_model, col="red")
trans_y <- powerfun(data$Streams + 1, 0)
hampel.fn <- function(r, a, b, c){
val <- rep(a*(b-a+c)/2, length(r))
val[r > -c & r<= -b] <- -a * (c*r[r > -c & r<= -b] + (0.5*r^2)[r > -c & r<= -b]) / (c-b) - 0.5*(a*b^2)/(c-b) - 0.5*a^2
val[r > -b & r<= -a] <- -a * r[r > -b & r<= -a] - 0.5*a^2
val[r > -a & r<= a] <- (0.5*r^2)[r > -a & r<= a]
val[r > a & r<= b] <- a * r[r > a & r<= b] - 0.5*a^2
val[r > b & r<= c] <- a * (c*r[r > b & r<= c] - (0.5*r^2)[r > b & r<= c]) / (c-b) - 0.5*(a*b^2)/(c-b) - 0.5*a^2
return(val)
}
hampel.fn.prime <- function(r, a, b, c){
val <- rep(0, length(r))
val[r > -c & r<= -b] <- -a * (c+r[r > -c & r<= -b]) / (c-b)
val[r > -b & r<= -a] <- -a
val[r > -a & r<= a] <- r[r > -a & r<= a]
val[r > a & r<= b] <- a
val[r > b & r<= c] <- a * (c-r[r > b & r<= c]) / (c-b)
return(val)
}
createRobustHampelRho <- function(x, y, kval) {
## local variable
xbar <- mean(x)
## Return this function
function(theta) {
alpha <- theta[1]
beta <- theta[2]
sum(hampel.fn(y - alpha - beta * (x - xbar), k = kval))
}
}
createRobustHampelGradient <- function(x, y, kval) {
## local variables
xbar <- mean(x)
ybar <- mean(y)
function(theta) {
alpha <- theta[1]
beta <- theta[2]
ru = y - alpha - beta * (x - xbar)
rhok = hampel.fn.prime(ru, k = kval)
-1 * c(sum(rhok * 1), sum(rhok * (x - xbar)))
}
}
nlminb(model,objective=rho,gradient=gradient)
nlminb(model,objective=rho,gradient=gradient,a=2,b=4,c=8)
nlminb(model,objective=createRobustHampelRho,gradient=createRobustHampelGradient(),a=2,b=4,c=8)
nlminb(model,objective=createRobustHampelRho,gradient=createRobustHampelGradient(),a=2,b=4,c=8)
nlminb(model,objective=createRobustHampelRho,gradient=createRobustHampelGradient,a=2,b=4,c=8)
nlminb(objective=createRobustHampelRho,gradient=createRobustHampelGradient,a=2,b=4,c=8)
nlminb(c(0,1),objective=createRobustHampelRho,gradient=createRobustHampelGradient,a=2,b=4,c=8)
nlminb(c(0,1),objective=createRobustHampelRho,gradient=createRobustHampelGradient)
hampel.fn <- function(r, a, b, c){
val <- rep(a*(b-a+c)/2, length(r))
val[r > -c & r<= -b] <- -a * (c*r[r > -c & r<= -b] + (0.5*r^2)[r > -c & r<= -b]) / (c-b) - 0.5*(a*b^2)/(c-b) - 0.5*a^2
val[r > -b & r<= -a] <- -a * r[r > -b & r<= -a] - 0.5*a^2
val[r > -a & r<= a] <- (0.5*r^2)[r > -a & r<= a]
val[r > a & r<= b] <- a * r[r > a & r<= b] - 0.5*a^2
val[r > b & r<= c] <- a * (c*r[r > b & r<= c] - (0.5*r^2)[r > b & r<= c]) / (c-b) - 0.5*(a*b^2)/(c-b) - 0.5*a^2
return(val)
}
hampel.fn.prime <- function(r, a, b, c){
val <- rep(0, length(r))
val[r > -c & r<= -b] <- -a * (c+r[r > -c & r<= -b]) / (c-b)
val[r > -b & r<= -a] <- -a
val[r > -a & r<= a] <- r[r > -a & r<= a]
val[r > a & r<= b] <- a
val[r > b & r<= c] <- a * (c-r[r > b & r<= c]) / (c-b)
return(val)
}
createRobustHampelRho <- function(x, y, a, b, c) {
## local variable
xbar <- mean(x)
## Return this function
function(theta) {
alpha <- theta[1]
beta <- theta[2]
sum(hampel.fn(y - alpha - beta * (x - xbar), a=a,b=b,c=c))
}
}
createRobustHampelGradient <- function(x, y, a, b, c) {
## local variables
xbar <- mean(x)
ybar <- mean(y)
function(theta) {
alpha <- theta[1]
beta <- theta[2]
ru = y - alpha - beta * (x - xbar)
rhok = hampel.fn.prime(ru, a=a,b=b,c=c)
-1 * c(sum(rhok * 1), sum(rhok * (x - xbar)))
}
}
nlminb(c(0,1),objective=createRobustHampelRho,gradient=createRobustHampelGradient,a=2,b=4,c=8)
nlminb(model,objective=createRobustHampelRho,gradient=createRobustHampelGradient,a=2,b=4,c=8)
