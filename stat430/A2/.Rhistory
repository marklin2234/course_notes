component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data <- function() {
noise <- runif(100, 0, 1)
data <- c()
for (i in 1:1000) {
s <- sample(1:100, 1)
data[i] <- noise[s]
}
return(data)
}
data$noise1 <- generate_noise_data()
data$noise2 <- generate_noise_data()
train_indices <- sample(1:nrow(data), nrow(data)/2)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
# Plot 1: Scatter plot of x1 vs x2
plot(data$x1, data$x1,
col = ifelse(data$y == 0, "blue", "red"),
main = "Scatter plot of x1 vs x1",
xlab = "x1 (y = 0)", ylab = "x1 (y = 1)")
legend("topright", legend = c("y=0", "y=1"), col = c("blue", "red"), lwd=1)
# Plot 2: Scatter plot of two noise variables
plot(data$noise_data1, data$noise_data2,
col = ifelse(data$y == 0, "blue", "red"),
pch = 20,
main = "Scatter plot of two noise variables",
xlab = "noise_data (y = 0)", ylab = "noise_data (y=1)")
View(data)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("dplyr")
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data <- function() {
noise <- runif(100, 0, 1)
data <- c()
for (i in 1:1000) {
s <- sample(1:100, 1)
data[i] <- noise[s]
}
return(data)
}
data$noise1 <- generate_noise_data()
data$noise2 <- generate_noise_data()
train_indices <- sample(1:nrow(data), nrow(data)/2)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
library(ggplot2)
library(dplyr)
ggplot(data, aes(x = x1, y = x1, color = factor(y))) +
geom_point(alpha = 0.6) +
labs(title = "Scatter Plot of x1 vs x1", x = "x1", y = "x1") +
scale_color_manual(values = c("blue", "red"), labels = c("y = 0", "y = 1")) +
theme_minimal()
set.seed(123)
n_obs_y0 <- 500
n_obs_y1 <- 500
n_noise_vars <- 100
generate_mixture <- function(n_obs) {
mu <- runif(10, 0, 1)
mixture_samples <- numeric(n_obs)
for (i in 1:n_obs) {
component <- sample(1:10, 1)
mixture_samples[i] <- rnorm(1, mean = mu[component], sd = 0.01)
}
return(mixture_samples)
}
x1_y0 <- generate_mixture(n_obs_y0)
x2_y0 <- generate_mixture(n_obs_y0)
x1_y1 <- generate_mixture(n_obs_y1)
x2_y1 <- generate_mixture(n_obs_y1)
noise_vars <- matrix(runif(n_obs_y0 + n_obs_y1, 0, 1), ncol = n_noise_vars)
data_y0 <- data.frame(x1 = x1_y0, x2 = x2_y0, noise_vars[1:n_obs_y0, ])
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data <- function() {
noise <- runif(100, 0, 1)
data <- c()
for (i in 1:1000) {
s <- sample(1:100, 1)
data[i] <- noise[s]
}
return(data)
}
data$noise1 <- generate_noise_data()
data$noise2 <- generate_noise_data()
train_indices <- sample(1:nrow(data), nrow(data)/2)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
library(ggplot2)
library(dplyr)
ggplot(data, aes(x = x1, y = x1, color = factor(y))) +
geom_point(alpha = 0.6) +
labs(title = "Scatter Plot of x1 vs x1", x = "x1", y = "x1") +
scale_color_manual(values = c("blue", "red"), labels = c("y = 0", "y = 1")) +
theme_minimal()
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data <- function() {
noise <- runif(100, 0, 1)
data <- c()
for (i in 1:1000) {
s <- sample(1:100, 1)
data[i] <- noise[s]
}
return(data)
}
data$noise1 <- generate_noise_data()
data$noise2 <- generate_noise_data()
train_indices <- sample(1:nrow(data), nrow(data)/2)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
library(ggplot2)
library(dplyr)
ggplot(data, aes(x = data$x1, y = data$x1, color = factor(y))) +
geom_point(alpha = 0.6) +
labs(title = "Scatter Plot of x1 vs x1", x = "x1", y = "x1") +
scale_color_manual(values = c("blue", "red"), labels = c("y = 0", "y = 1")) +
theme_minimal()
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data <- function() {
noise <- runif(100, 0, 1)
data <- c()
for (i in 1:1000) {
s <- sample(1:100, 1)
data[i] <- noise[s]
}
return(data)
}
data$noise <- generate_noise_data()
train_indices <- sample(1:nrow(data), nrow(data)/2)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
library(ggplot2)
library(dplyr)
ggplot(data, aes(x = x1, y = x1, color = factor(y))) +
geom_point(alpha = 0.6) +
labs(title = "Scatter Plot of x1 vs x1", x = "x1", y = "x1") +
scale_color_manual(values = c("blue", "red"), labels = c("y = 0", "y = 1")) +
theme_minimal()
ggplot(data, aes(x=noise, y=noise, color=factor(y))) +
geom_point(alpha=0.6) +
labs(title="Scatter Plot of noise data", x="x1", y="x1") +
scale_color_manual(values=c("blue", "red"), labels=c("y=0","y-1")) +
theme_minimal()
View(data)
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data_with_means <- function() {
noise_means <- numeric(p)
noise_data <- matrix(0, nrow = 1000, ncol = 100)
for (j in 1:100) {
noise_column <- runif(1000, 0, 1)
noise_data[, j] <- noise_column
noise_means[j] <- mean(noise_column)
}
list(noise_data = noise_data, noise_means = noise_means)
}
noise <- generate_noise_data()
data$noise <- noise$noise_data
noise
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data_with_means <- function() {
noise_means <- numeric(p)
noise_data <- matrix(0, nrow = 1000, ncol = 100)
for (j in 1:100) {
noise_column <- runif(1000, 0, 1)
noise_data[, j] <- noise_column
noise_means[j] <- mean(noise_column)
}
list(noise_data = noise_data, noise_means = noise_means)
}
noise <- generate_noise_data_with_means()
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data_with_means <- function() {
noise_means <- numeric(100)
noise_data <- matrix(0, nrow = 1000, ncol = 100)
for (j in 1:100) {
noise_column <- runif(1000, 0, 1)
noise_data[, j] <- noise_column
noise_means[j] <- mean(noise_column)
}
list(noise_data = noise_data, noise_means = noise_means)
}
noise <- generate_noise_data_with_means()
data$noise <- noise$noise_data
noise_means <- noise$noise_means
train_indices <- sample(1:nrow(data), nrow(data)/2)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
library(ggplot2)
library(dplyr)
ggplot(data, aes(x = x1, y = x1, color = factor(y))) +
geom_point(alpha = 0.6) +
labs(title = "Scatter Plot of x1 vs x1", x = "x1", y = "x1") +
scale_color_manual(values = c("blue", "red"), labels = c("y = 0", "y = 1")) +
theme_minimal()
ggplot(data, aes(x=noise, y=noise, color=factor(y))) +
geom_point(alpha=0.6) +
labs(title="Scatter Plot of noise data", x="x1", y="x1") +
scale_color_manual(values=c("blue", "red"), labels=c("y=0","y=1")) +
theme_minimal()
View(data)
View(data)
set.seed(123)
generate_mixture_data <- function(n, y) {
means <- runif(10, 0, 1)
data <- data.frame(x1 = numeric(n), x2 = numeric(n), y = y)
for (i in 1:n) {
component <- sample(1:10, 1)
data$x1[i] <- rnorm(1, means[component], 0.01)
component <- sample(1:10, 1)
data$x2[i] <- rnorm(1, means[component], 0.01)
}
return(data)
}
y0 <- generate_mixture_data(500, 0)
y1 <- generate_mixture_data(500, 1)
data <- rbind(y0, y1)
generate_noise_data <- function() {
noise <- runif(100, 0, 1)
data <- c()
for (i in 1:1000) {
s <- sample(1:100, 1)
data[i] <- noise[s]
}
return(data)
}
data$noise <- generate_noise_data()
train_indices <- sample(1:nrow(data), nrow(data)/2)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
library(ggplot2)
library(dplyr)
ggplot(data, aes(x = x1, y = x1, color = factor(y))) +
geom_point(alpha = 0.6) +
labs(title = "Scatter Plot of x1 vs x1", x = "x1", y = "x1") +
scale_color_manual(values = c("blue", "red"), labels = c("y = 0", "y = 1")) +
theme_minimal()
ggplot(data, aes(x=noise, y=noise, color=factor(y))) +
geom_point(alpha=0.6) +
labs(title="Scatter Plot of noise data", x="x1", y="x1") +
scale_color_manual(values=c("blue", "red"), labels=c("y=0","y=1")) +
theme_minimal()
noise_means <- mean(data$noise)
ggplot(data.frame(noise_means), aes(x = noise_means)) +
geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
labs(title = "Histogram of the Means of the Noise Variables", x = "Mean", y = "Count") +
theme_minimal()
noise_means
setwd("/Users/marklin/Documents/waterloo/stat430/A2")
muzzle <- read.table("muzzle.txt")
View(muzzle)
muzzle <- read.table("muzzle.txt")
v1 <- muzzle["V1"]
View(v1)
View(muzzle)
muzzle <- read.table("muzzle.txt")
v1 <- muzzle["V1" == 0.016]
v2 <- muzzle["V2"]
View(v1)
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016]
data <- read.table("muzzle.txt")
v1 <- data[data$"V1" == 0.016]
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016,]
v2 <- data["V2"]
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016,]
v2 <- data[data$V2 == 0.03, ]
v3 <- data[data$V3 == 0.044, ]
View(v1)
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016, "V2"]
v2 <- data[data$V2 == 0.03, "V2"]
v3 <- data[data$V3 == 0.044, "V2"]
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016, "V2"]
v2 <- data[data$V2 == 0.03, "V2"]
v3 <- data[data$V3 == 0.044, "V2"]
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016,]
v2 <- data[data$V2 == 0.03, ]
v3 <- data[data$V3 == 0.044, ]
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016,]$V2
v2 <- data[data$V2 == 0.03, ]$V2
v3 <- data[data$V3 == 0.044, ]$V2
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016,]
v2 <- data[data$V2 == 0.03, ]
v3 <- data[data$V3 == 0.044, ]
View(v3)
View(v2)
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016, ]
v2 <- data[data$V1 == 0.03, ]
v3 <- data[data$V1 == 0.044, ]
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016, "V2"]
v2 <- data[data$V1 == 0.03, "V2"]
v3 <- data[data$V1 == 0.044, "V2"]
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016, ]$V2
v2 <- data[data$V1 == 0.03, ]$V2
v3 <- data[data$V1 == 0.044, ]$V2
data <- read.table("muzzle.txt")
v1 <- data[data$V1 == 0.016, ]$V2
v2 <- data[data$V1 == 0.03, ]$V2
v3 <- data[data$V1 == 0.044, ]$V2
m1 <- mean(v1)
m2 <- mean(v2)
m3 <- mean(v3)
data <- read.table("muzzle.txt")
v1 <- as.numeric(data[data$V1 == 0.016, ]$V2)
v2 <- data[data$V1 == 0.03, ]$V2
v3 <- data[data$V1 == 0.044, ]$V2
m1 <- mean(v1)
m2 <- mean(v2)
m3 <- mean(v3)
data <- read.table("muzzle.txt")
v1 <- as.numeric(data[data$V1 == 0.016, ]$V2)
v2 <- as.numeric(data[data$V1 == 0.03, ]$V2)
v3 <- as.numeric(data[data$V1 == 0.044, ]$V2)
m1 <- mean(v1)
m2 <- mean(v2)
m3 <- mean(v3)
data <- read.table("muzzle.txt")
x <- data$V1
P1 <- (x - 0.030)/0.014
data <- read.table("muzzle.txt")
x <- as.numeric(data$V1)
P1 <- (x - 0.030)/0.014
P2 <- 3*((x - 0.030)/0.014)^2 - 2
fit <- lm(data$V2 ~ P1 + P2, data=data)
x
data <- read.table("muzzle.txt")
x <- data$V1
P1 <- (x - 0.030)/0.014
x
data <- read.table("muzzle.txt")
x <- data$V1
x <- x[-1]
P1 <- (x - 0.030)/0.014
x
data <- read.table("muzzle.txt")
x <- data$V1
x <- as.numeric(x[-1])
P1 <- (x - 0.030)/0.014
P2 <- 3*((x - 0.030)/0.014)^2 - 2
fit <- lm(data$V2 ~ P1 + P2, data=data)
data <- read.table("muzzle.txt")
data <- data[-1]
x <- data$V1
x <- as.numeric(x[-1])
P1 <- (x - 0.030)/0.014
P2 <- 3*((x - 0.030)/0.014)^2 - 2
fit <- lm(data$V2 ~ P1 + P2, data=data)
View(data)
data <- read.table("muzzle.txt")
data <- data[,-1]
x <- data$V1
data <- read.table("muzzle.txt")
data <- data[-1,]
x <- data$V1
x <- as.numeric(x[-1])
P1 <- (x - 0.030)/0.014
P2 <- 3*((x - 0.030)/0.014)^2 - 2
fit <- lm(data$V2 ~ P1 + P2, data=data)
data <- read.table("muzzle.txt")
data <- data[-1,]
x <- data$V1
P1 <- (x - 0.030)/0.014
View(data)
data <- read.table("muzzle.txt")
data <- data[-1,]
x <- data$V1
P1 <- (x - 0.030)/0.014
data <- read.table("muzzle.txt")
data <- data[-1,]
x <- data$V1
P1 <- (x - 0.030)/0.014
x
data <- read.table("muzzle.txt")
data <- data[-1,]
x <- as.numeric(data$V1)
P1 <- (x - 0.030)/0.014
P2 <- 3*((x - 0.030)/0.014)^2 - 2
fit <- lm(data$V2 ~ P1 + P2, data=data)
data <- read.table("muzzle.txt")
data <- data[-1,]
x <- as.numeric(data$V1)
P1 <- (x - 0.030)/0.014
P2 <- 3*((x - 0.030)/0.014)^2 - 2
fit <- lm(data$V2 ~ P1 + P2, data=data)
summary(fit)
x <- c(7.7, 6.3, 8.6, 8.0, 7.3, 7.2, 13.0, 13.3, 10.7)
y <- c(791.7, 610.0, 710.0, 731.0, 710.0, 604.7, 983.3, 958.8, 747.8)
type <- factor(c("Canna", "Canna", "Canna", "Corn", "Corn", "Corn", "Potato", "Potato","Potato"))
data <- data.frame(x, y, type)
null <- lm(y ~ x, data=data)
full <- lm(y ~ x + type, data=data)
anova(null_model, full_model)
x <- c(7.7, 6.3, 8.6, 8.0, 7.3, 7.2, 13.0, 13.3, 10.7)
y <- c(791.7, 610.0, 710.0, 731.0, 710.0, 604.7, 983.3, 958.8, 747.8)
type <- factor(c("Canna", "Canna", "Canna", "Corn", "Corn", "Corn", "Potato", "Potato","Potato"))
data <- data.frame(x, y, type)
null <- lm(y ~ x, data=data)
full <- lm(y ~ x + type, data=data)
anova(null, full)
