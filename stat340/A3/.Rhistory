print(paste0("Estimated Variance: ", var))
rm(list=ls())
set.seed(123)
n = 5000
mu = c(3,4)
sigma <- matrix(c(2,3,3,8), nrow = 2, ncol = 2)
A <- t(chol(sigma))
p <- c()
for (i in 1:n) {
Z <- matrix(rnorm(2),ncol=2)
X <- mu + A%*%t(Z)
p <- c(p, if(max(X[1], X[2]) <= 7) 1 else 0)
}
p_hat <- sum(p)/n
S_n <- sqrt(p_hat*(1-p_hat)/n)
var <- S_n^2
print(paste0("95% CI: [", p_hat - 1.96*S_n, " ", p_hat + 1.96*S_n, "]"))
print(paste0("Estimated Variance: ", var))
asian_call_MC <- function(n=100, S.0=100, K=110, r=0.01, sig=0.1, N=260, n.pilot=100, T=1) {
mc <- mu_MC(n, S.0, K, r, sig, N, T)
av <- mu_AV(n, S.0, K, r, sig, N, T)
cv <- mu_CV(n, S.0, K, r, sig, N, T, n.pilot)
print(paste0(mc, " ", av, " ", cv))
}
mu_MC <- function(n, S.0, K, r, sig, N, T) {
mu <- c()
for (i in 1:n) {
t <- runif(N, min=0, T)
W_t <- rnorm(N, mean=0, sd=t)
X_t <- (r - (sig^2)/2)*t+(sig*W_t)
S_t <- S.0*exp(X_t)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
mu <- c(mu, g)
}
return ((1/n)*sum(mu))
}
mu_AV <- function(n, S.0, K, r, sig, N, T) {
n <- n / 2
mu <- c()
mu_tilde <- c()
for (i in 1:n) {
t <- runif(N, min=0, T)
t_tilde <- 1 - t
W_t <- rnorm(N, mean=0, sd=t)
W_t_tilde <- rnorm(N, mean=0, sd=t_tilde)
X_t <- (r - sig^2/2)*t+(sig*W_t)
X_t_tilde <- (r - sig^2/2)*t_tilde+(sig*W_t_tilde)
S_t <- S.0*exp(X_t)
S_t_tilde <- S.0*exp(X_t_tilde)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
g_tilde <- exp(-r*T)*max(0, (1/N)*sum(S_t_tilde) - K)
mu <- c(mu, g)
mu_tilde <- c(mu_tilde, g_tilde)
}
return (1/n*sum((mu + mu_tilde)/2))
}
mu_CV <- function(n, S.0, K, r, sig, N, T, n.pilot) {
a = log(S.0) + (r - sig^2/2)*T*(N + 1)/(2*N)
b = sig^2*((T*(N+1)*(2*N+1))/(6*N^2))
d1 = (-log(K) + a + b)/sqrt(b)
d2 = d1 - sqrt(b)
mu <- c()
for (i in 1:n) {
U <- runif(n.pilot)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n.pilot)
beta <- cov(y, c) / var(c)
U <- runif(n)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n)
mu <- c(mu, mean(y + beta*(2/3 - c)))
}
mean(mu)
}
asian_call_MC()
asian_call_MC <- function(n=100, S.0=100, K=110, r=0.01, sig=0.1, N=260, n.pilot=100, T=1) {
mc <- mu_MC(n, S.0, K, r, sig, N, T)
av <- mu_AV(n, S.0, K, r, sig, N, T)
cv <- mu_CV(n, S.0, K, r, sig, N, T, n.pilot)
print(paste0(mc, " ", av, " ", cv))
}
mu_MC <- function(n, S.0, K, r, sig, N, T) {
mu <- c()
for (i in 1:n) {
t <- runif(N, min=0, max=T)
W_t <- rnorm(N, mean=0, sd=t)
X_t <- (r - (sig^2)/2)*t+(sig*W_t)
S_t <- S.0*exp(X_t)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
mu <- c(mu, g)
}
return ((1/n)*sum(mu))
}
mu_AV <- function(n, S.0, K, r, sig, N, T) {
n <- n / 2
mu <- c()
mu_tilde <- c()
for (i in 1:n) {
t <- runif(N, min=0, T)
t_tilde <- 1 - t
W_t <- rnorm(N, mean=0, sd=t)
W_t_tilde <- rnorm(N, mean=0, sd=t_tilde)
X_t <- (r - sig^2/2)*t+(sig*W_t)
X_t_tilde <- (r - sig^2/2)*t_tilde+(sig*W_t_tilde)
S_t <- S.0*exp(X_t)
S_t_tilde <- S.0*exp(X_t_tilde)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
g_tilde <- exp(-r*T)*max(0, (1/N)*sum(S_t_tilde) - K)
mu <- c(mu, g)
mu_tilde <- c(mu_tilde, g_tilde)
}
return (1/n*sum((mu + mu_tilde)/2))
}
mu_CV <- function(n, S.0, K, r, sig, N, T, n.pilot) {
a = log(S.0) + (r - sig^2/2)*T*(N + 1)/(2*N)
b = sig^2*((T*(N+1)*(2*N+1))/(6*N^2))
d1 = (-log(K) + a + b)/sqrt(b)
d2 = d1 - sqrt(b)
mu <- c()
for (i in 1:n) {
U <- runif(n.pilot)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n.pilot)
beta <- cov(y, c) / var(c)
U <- runif(n)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n)
mu <- c(mu, mean(y + beta*(2/3 - c)))
}
mean(mu)
}
asian_call_MC()
asian_call_MC <- function(n=100, S.0=100, K=110, r=0.01, sig=0.1, N=260, n.pilot=100, T=1) {
mc <- mu_MC(n, S.0, K, r, sig, N, T)
av <- mu_AV(n, S.0, K, r, sig, N, T)
cv <- mu_CV(n, S.0, K, r, sig, N, T, n.pilot)
print(paste0(mc, " ", av, " ", cv))
}
mu_MC <- function(n, S.0, K, r, sig, N, T) {
mu <- c()
for (i in 1:n) {
t <- runif(N, min=0, max=T)
W_t <- pnorm(N, mean=0, sd=t)
X_t <- (r - (sig^2)/2)*t+(sig*W_t)
S_t <- S.0*exp(X_t)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
mu <- c(mu, g)
}
return ((1/n)*sum(mu))
}
mu_AV <- function(n, S.0, K, r, sig, N, T) {
n <- n / 2
mu <- c()
mu_tilde <- c()
for (i in 1:n) {
t <- runif(N, min=0, T)
t_tilde <- 1 - t
W_t <- pnorm(N, mean=0, sd=t)
W_t_tilde <- rnorm(N, mean=0, sd=t_tilde)
X_t <- (r - sig^2/2)*t+(sig*W_t)
X_t_tilde <- (r - sig^2/2)*t_tilde+(sig*W_t_tilde)
S_t <- S.0*exp(X_t)
S_t_tilde <- S.0*exp(X_t_tilde)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
g_tilde <- exp(-r*T)*max(0, (1/N)*sum(S_t_tilde) - K)
mu <- c(mu, g)
mu_tilde <- c(mu_tilde, g_tilde)
}
return (1/n*sum((mu + mu_tilde)/2))
}
mu_CV <- function(n, S.0, K, r, sig, N, T, n.pilot) {
a = log(S.0) + (r - sig^2/2)*T*(N + 1)/(2*N)
b = sig^2*((T*(N+1)*(2*N+1))/(6*N^2))
d1 = (-log(K) + a + b)/sqrt(b)
d2 = d1 - sqrt(b)
mu <- c()
for (i in 1:n) {
U <- runif(n.pilot)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n.pilot)
beta <- cov(y, c) / var(c)
U <- runif(n)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n)
mu <- c(mu, mean(y + beta*(2/3 - c)))
}
mean(mu)
}
asian_call_MC()
asian_call_MC <- function(n=100, S.0=100, K=110, r=0.01, sig=0.1, N=260, n.pilot=100, T=1) {
mc <- mu_MC(n, S.0, K, r, sig, N, T)
av <- mu_AV(n, S.0, K, r, sig, N, T)
cv <- mu_CV(n, S.0, K, r, sig, N, T, n.pilot)
print(paste0(mc, " ", av, " ", cv))
}
mu_MC <- function(n, S.0, K, r, sig, N, T) {
mu <- c()
for (i in 1:n) {
t <- runif(N, min=0, max=T)
W_t <- rnorm(N, mean=0, sd=t)
X_t <- (r - (sig^2)/2)*t+(sig*W_t)
S_t <- S.0*exp(X_t)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
mu <- c(mu, g)
}
return ((1/n)*sum(mu))
}
mu_AV <- function(n, S.0, K, r, sig, N, T) {
n <- n / 2
mu <- c()
mu_tilde <- c()
for (i in 1:n) {
t <- runif(N, min=0, T)
t_tilde <- 1 - t
W_t <- rnorm(N, mean=0, sd=t)
W_t_tilde <- rnorm(N, mean=0, sd=t_tilde)
X_t <- (r - sig^2/2)*t+(sig*W_t)
X_t_tilde <- (r - sig^2/2)*t_tilde+(sig*W_t_tilde)
S_t <- S.0*exp(X_t)
S_t_tilde <- S.0*exp(X_t_tilde)
g <- exp(-r*T)*max(0, (1/N)*sum(S_t) - K)
g_tilde <- exp(-r*T)*max(0, (1/N)*sum(S_t_tilde) - K)
mu <- c(mu, g)
mu_tilde <- c(mu_tilde, g_tilde)
}
return (1/n*sum((mu + mu_tilde)/2))
}
mu_CV <- function(n, S.0, K, r, sig, N, T, n.pilot) {
a = log(S.0) + (r - sig^2/2)*T*(N + 1)/(2*N)
b = sig^2*((T*(N+1)*(2*N+1))/(6*N^2))
d1 = (-log(K) + a + b)/sqrt(b)
d2 = d1 - sqrt(b)
mu <- c()
for (i in 1:n) {
U <- runif(n.pilot)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n.pilot)
beta <- cov(y, c) / var(c)
U <- runif(n)
c <- sqrt(U)
y <- rep(exp(a+b/2)*pnorm(d1)-K*pnorm(d2), n)
mu <- c(mu, mean(y + beta*(2/3 - c)))
}
mean(mu)
}
asian_call_MC()
lambda_a <- 11
lambda_s <- 10
n <- 10
T = 10
N <- c(100, 1000, 10000)
for (l in  1:length(N)) {
n <- N[l]
observed <- c()
while(n > 0) {
arrivals <- c()
service <- c()
t <- 0
n <- n - 1
while(t <= T) {
u <- runif(1)
a <- -log(u)/lambda_a
v <- runif(1)
s <- -log(v)/lambda_s
t <- t + a
if (t <= T) {
arrivals <- c(arrivals, t)
service <- c(service, s)
}
}
departures <- c()
prev_depart <- 0
for (j in 1:length(service)) {
departures <- c(departures, max(prev_depart + service[j], arrivals[j] + service[j]))
prev_depart <- departures[j]
}
for (j in 1:length(departures)) {
if (departures[j] > T) {
numCustomers <- length(departures) - j
break
}
}
observed <<- c(observed, numCustomers)
}
mc_estimate <- sum(observed)/length(observed)
S_n = sqrt((1/(length(observed) - 1))*(sum((observed - mc_estimate)^2)))
print(paste0("95% CI: [", mc_estimate - 1.96*S_n, " ", mc_estimate + 1.96*S_n, "] for n = ", N[l]))
}
lambda_a <- 11
lambda_s <- 10
n <- 10
T = 10
N <- c(100, 1000, 10000)
for (l in  1:length(N)) {
n <- N[l]
observed <- c()
while(n > 0) {
arrivals <- c()
service <- c()
t <- 0
n <- n - 1
while(t <= T) {
u <- runif(1)
a <- -log(u)/lambda_a
v <- runif(1)
s <- -log(v)/lambda_s
t <- t + a
if (t <= T) {
arrivals <- c(arrivals, t)
service <- c(service, s)
}
}
departures <- c()
prev_depart <- 0
for (j in 1:length(service)) {
departures <- c(departures, max(prev_depart + service[j], arrivals[j] + service[j]))
prev_depart <- departures[j]
}
for (j in 1:length(departures)) {
if (departures[j] > T) {
numCustomers <- length(departures) - j
break
}
}
observed <<- c(observed, numCustomers)
}
mc_estimate <- sum(observed)/length(observed)
S_n = sqrt((1/(length(observed) - 1))*(sum((observed - mc_estimate)^2)))
se <- S_n/sqrt{n}
lambda_a <- 11
lambda_s <- 10
n <- 10
T = 10
N <- c(100, 1000, 10000)
for (l in  1:length(N)) {
n <- N[l]
observed <- c()
while(n > 0) {
arrivals <- c()
service <- c()
t <- 0
n <- n - 1
while(t <= T) {
u <- runif(1)
a <- -log(u)/lambda_a
v <- runif(1)
s <- -log(v)/lambda_s
t <- t + a
if (t <= T) {
arrivals <- c(arrivals, t)
service <- c(service, s)
}
}
departures <- c()
prev_depart <- 0
for (j in 1:length(service)) {
departures <- c(departures, max(prev_depart + service[j], arrivals[j] + service[j]))
prev_depart <- departures[j]
}
for (j in 1:length(departures)) {
if (departures[j] > T) {
numCustomers <- length(departures) - j
break
}
}
observed <<- c(observed, numCustomers)
}
mc_estimate <- sum(observed)/length(observed)
S_n = sqrt((1/(length(observed) - 1))*(sum((observed - mc_estimate)^2)))
se <- S_n/sqrt(n)
print(paste0("95% CI: [", mc_estimate - 1.96*S_n, " ", mc_estimate + 1.96*S_n, "] for n = ", N[l]))
}
lambda_a <- 11
lambda_s <- 10
n <- 10
T = 10
N <- c(100, 1000, 10000)
for (l in  1:length(N)) {
n <- N[l]
observed <- c()
while(n > 0) {
arrivals <- c()
service <- c()
t <- 0
n <- n - 1
while(t <= T) {
u <- runif(1)
a <- -log(u)/lambda_a
v <- runif(1)
s <- -log(v)/lambda_s
t <- t + a
if (t <= T) {
arrivals <- c(arrivals, t)
service <- c(service, s)
}
}
departures <- c()
prev_depart <- 0
for (j in 1:length(service)) {
departures <- c(departures, max(prev_depart + service[j], arrivals[j] + service[j]))
prev_depart <- departures[j]
}
for (j in 1:length(departures)) {
if (departures[j] > T) {
numCustomers <- length(departures) - j
break
}
}
observed <<- c(observed, numCustomers)
}
mc_estimate <- sum(observed)/length(observed)
S_n = sqrt((1/(length(observed) - 1))*(sum((observed - mc_estimate)^2)))
se <- S_n/sqrt(n)
print(paste0("95% CI: [", mc_estimate - 1.96*se, " ", mc_estimate + 1.96*se, "] for n = ", N[l]))
}
lambda_a <- 11
lambda_s <- 10
n <- 10
T = 10
N <- c(100, 1000, 10000)
for (l in  1:length(N)) {
n <- N[l]
observed <- c()
while(n > 0) {
arrivals <- c()
service <- c()
t <- 0
n <- n - 1
while(t <= T) {
u <- runif(1)
a <- -log(u)/lambda_a
v <- runif(1)
s <- -log(v)/lambda_s
t <- t + a
if (t <= T) {
arrivals <- c(arrivals, t)
service <- c(service, s)
}
}
departures <- c()
prev_depart <- 0
for (j in 1:length(service)) {
departures <- c(departures, max(prev_depart + service[j], arrivals[j] + service[j]))
prev_depart <- departures[j]
}
for (j in 1:length(departures)) {
if (departures[j] > T) {
numCustomers <- length(departures) - j
break
}
}
observed <<- c(observed, numCustomers)
}
mc_estimate <- sum(observed)/length(observed)
S_n = sqrt((1/(length(observed) - 1))*(sum((observed - mc_estimate)^2)))
se <- S_n/sqrt(length(observed))
print(paste0("95% CI: [", mc_estimate - 1.96*se, " ", mc_estimate + 1.96*se, "] for n = ", N[l]))
}
set.seed(123)
n <- 2500
p <- c()
p_tilde <- c()
for (i in 1:n) {
Z <- matrix(rnorm(2),nrow=2)
X <- mu + A%*%Z
X_tilde <- -X
a <- if (max(X[1], X[2]) <= 7) 1 else 0
b <- if (min(X_tilde[1], X_tilde[2]) >= -7) 1 else 0
p <- c(p, (a + b) / 2)
}
p_hat <- sum(p) / n
S_n <- sqrt((1/(n - 1)) * sum((p - p_hat)^2))
var <- S_n^2/2
se <- S_n/sqrt(n)
print(paste0("95% CI: [", p_hat - 1.96*se, " ", p_hat + 1.96*se, "]"))
print(paste0("Estimated Variance: ", var))
rm(list=ls())
set.seed(123)
n = 5000
mu = c(3,4)
sigma <- matrix(c(2,3,3,8), nrow = 2, ncol = 2)
A <- t(chol(sigma))
p <- c()
for (i in 1:n) {
Z <- matrix(rnorm(2),nrow=2)
X <- mu + A%*%Z
p <- c(p, if(max(X[1], X[2]) <= 7) 1 else 0)
}
p_hat <- sum(p)/n
S_n <- sqrt((1/(n - 1)) * sum((p - p_hat)^2))
var <- S_n^2
se <- S_n / sqrt(n)
print(paste0("95% CI: [", p_hat - 1.96*se, " ", p_hat + 1.96*se, "]"))
print(paste0("Estimated Variance: ", var))
set.seed(123)
n <- 2500
p <- c()
p_tilde <- c()
for (i in 1:n) {
Z <- matrix(rnorm(2),nrow=2)
X <- mu + A%*%Z
X_tilde <- -X
a <- if (max(X[1], X[2]) <= 7) 1 else 0
b <- if (min(X_tilde[1], X_tilde[2]) >= -7) 1 else 0
p <- c(p, (a + b) / 2)
}
p_hat <- sum(p) / n
S_n <- sqrt((1/(n - 1)) * sum((p - p_hat)^2))
var <- S_n^2/2
se <- S_n/sqrt(n)
print(paste0("95% CI: [", p_hat - 1.96*se, " ", p_hat + 1.96*se, "]"))
print(paste0("Estimated Variance: ", var))
