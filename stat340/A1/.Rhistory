d <- 20
r <- 20000
s <- 5
n <- r * s
k <- d^s
x <- 1
randu = function() {
x <<- (2^16 + 3) * x %% 2^31
x/2^31
}
nums <- numeric(n)
for (i in 1:n) {
nums[i] <- randu()
}
matrix <- matrix(nums, ncol=s, byrow = TRUE)
N <- numeric(k)
for (i in 1:r) {
box <- sum((floor(matrix[i, ] * d)) * d^(0:(s-1))) + 1
N[box] <- N[box] + 1
}
d <- 10
r <- 10000
s <- 2
n <- r * s
k <- d^s
x <- 1
randu = function() {
x <<- (2^16 + 3) * x %% 2^31
x/2^31
}
nums <- numeric(n)
for (i in 1:n) {
nums[i] <- randu()
}
matrix <- matrix(nums, ncol=s, byrow = TRUE)
N <- numeric(k)
for (i in 1:r) {
box <- sum((floor(matrix[i, ] * d)) * d^(0:(s-1))) + 1
N[box] <- N[box] + 1
}
expected_count <- r / k
x_sqr <- sum((N - expected_count)^2 / expected_count)
p = pchisq(x_sqr, df =k-1, lower.tail = FALSE)
expected_count <- r / k
x_sqr <- sum((N - expected_count)^2 / expected_count)
p = pchisq(x_sqr, df =k-1, lower.tail = FALSE)
# Q2
Z_0 <- 7811
# step 1: square it
Z_0 <- Z_0^2
